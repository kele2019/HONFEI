//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18408
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.18408 版自动生成。
// 
#pragma warning disable 1591

namespace UltimusSubscriber.SubscriberServiceRef {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="SubscriberServiceSoap", Namespace="http://tempuri.org/")]
    public partial class SubscriberService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback CompletedTaskDeletedOperationCompleted;
        
        private System.Threading.SendOrPostCallback IncidentAbortedOperationCompleted;
        
        private System.Threading.SendOrPostCallback IncidentCompletedOperationCompleted;
        
        private System.Threading.SendOrPostCallback IncidentInitiatedOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueueTaskActivatedOperationCompleted;
        
        private System.Threading.SendOrPostCallback StepAbortedOperationCompleted;
        
        private System.Threading.SendOrPostCallback TaskActivatedOperationCompleted;
        
        private System.Threading.SendOrPostCallback TaskAssignedOperationCompleted;
        
        private System.Threading.SendOrPostCallback TaskCompletedOperationCompleted;
        
        private System.Threading.SendOrPostCallback TaskConferredOperationCompleted;
        
        private System.Threading.SendOrPostCallback TaskDelayedOperationCompleted;
        
        private System.Threading.SendOrPostCallback TaskDeletedOnMinResponseCompleteOperationCompleted;
        
        private System.Threading.SendOrPostCallback TaskLateOperationCompleted;
        
        private System.Threading.SendOrPostCallback TaskResubmittedOperationCompleted;
        
        private System.Threading.SendOrPostCallback TaskReturnedOperationCompleted;
        
        private System.Threading.SendOrPostCallback TaskSubmitFailedOperationCompleted;
        
        private System.Threading.SendOrPostCallback TasksPerDayThresholdReachedOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckInTaskOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckOutTaskOperationCompleted;
        
        private System.Threading.SendOrPostCallback FindReplaceIncidentOperationCompleted;
        
        private System.Threading.SendOrPostCallback FindReplaceTaskOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveTaskOperationCompleted;
        
        private System.Threading.SendOrPostCallback LogInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback LogErrorOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public SubscriberService() {
            this.Url = global::UltimusSubscriber.Properties.Settings.Default.UltimusSubscriber_SubscriberServiceRef_SubscriberService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event CompletedTaskDeletedCompletedEventHandler CompletedTaskDeletedCompleted;
        
        /// <remarks/>
        public event IncidentAbortedCompletedEventHandler IncidentAbortedCompleted;
        
        /// <remarks/>
        public event IncidentCompletedCompletedEventHandler IncidentCompletedCompleted;
        
        /// <remarks/>
        public event IncidentInitiatedCompletedEventHandler IncidentInitiatedCompleted;
        
        /// <remarks/>
        public event QueueTaskActivatedCompletedEventHandler QueueTaskActivatedCompleted;
        
        /// <remarks/>
        public event StepAbortedCompletedEventHandler StepAbortedCompleted;
        
        /// <remarks/>
        public event TaskActivatedCompletedEventHandler TaskActivatedCompleted;
        
        /// <remarks/>
        public event TaskAssignedCompletedEventHandler TaskAssignedCompleted;
        
        /// <remarks/>
        public event TaskCompletedCompletedEventHandler TaskCompletedCompleted;
        
        /// <remarks/>
        public event TaskConferredCompletedEventHandler TaskConferredCompleted;
        
        /// <remarks/>
        public event TaskDelayedCompletedEventHandler TaskDelayedCompleted;
        
        /// <remarks/>
        public event TaskDeletedOnMinResponseCompleteCompletedEventHandler TaskDeletedOnMinResponseCompleteCompleted;
        
        /// <remarks/>
        public event TaskLateCompletedEventHandler TaskLateCompleted;
        
        /// <remarks/>
        public event TaskResubmittedCompletedEventHandler TaskResubmittedCompleted;
        
        /// <remarks/>
        public event TaskReturnedCompletedEventHandler TaskReturnedCompleted;
        
        /// <remarks/>
        public event TaskSubmitFailedCompletedEventHandler TaskSubmitFailedCompleted;
        
        /// <remarks/>
        public event TasksPerDayThresholdReachedCompletedEventHandler TasksPerDayThresholdReachedCompleted;
        
        /// <remarks/>
        public event CheckInTaskCompletedEventHandler CheckInTaskCompleted;
        
        /// <remarks/>
        public event CheckOutTaskCompletedEventHandler CheckOutTaskCompleted;
        
        /// <remarks/>
        public event FindReplaceIncidentCompletedEventHandler FindReplaceIncidentCompleted;
        
        /// <remarks/>
        public event FindReplaceTaskCompletedEventHandler FindReplaceTaskCompleted;
        
        /// <remarks/>
        public event SaveTaskCompletedEventHandler SaveTaskCompleted;
        
        /// <remarks/>
        public event LogInfoCompletedEventHandler LogInfoCompleted;
        
        /// <remarks/>
        public event LogErrorCompletedEventHandler LogErrorCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CompletedTaskDeleted", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CompletedTaskDeleted(string strProcessName, int nIncident, string strTaskId) {
            this.Invoke("CompletedTaskDeleted", new object[] {
                        strProcessName,
                        nIncident,
                        strTaskId});
        }
        
        /// <remarks/>
        public void CompletedTaskDeletedAsync(string strProcessName, int nIncident, string strTaskId) {
            this.CompletedTaskDeletedAsync(strProcessName, nIncident, strTaskId, null);
        }
        
        /// <remarks/>
        public void CompletedTaskDeletedAsync(string strProcessName, int nIncident, string strTaskId, object userState) {
            if ((this.CompletedTaskDeletedOperationCompleted == null)) {
                this.CompletedTaskDeletedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCompletedTaskDeletedOperationCompleted);
            }
            this.InvokeAsync("CompletedTaskDeleted", new object[] {
                        strProcessName,
                        nIncident,
                        strTaskId}, this.CompletedTaskDeletedOperationCompleted, userState);
        }
        
        private void OnCompletedTaskDeletedOperationCompleted(object arg) {
            if ((this.CompletedTaskDeletedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CompletedTaskDeletedCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IncidentAborted", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void IncidentAborted(string strProcessName, int nIncident, string strReason) {
            this.Invoke("IncidentAborted", new object[] {
                        strProcessName,
                        nIncident,
                        strReason});
        }
        
        /// <remarks/>
        public void IncidentAbortedAsync(string strProcessName, int nIncident, string strReason) {
            this.IncidentAbortedAsync(strProcessName, nIncident, strReason, null);
        }
        
        /// <remarks/>
        public void IncidentAbortedAsync(string strProcessName, int nIncident, string strReason, object userState) {
            if ((this.IncidentAbortedOperationCompleted == null)) {
                this.IncidentAbortedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIncidentAbortedOperationCompleted);
            }
            this.InvokeAsync("IncidentAborted", new object[] {
                        strProcessName,
                        nIncident,
                        strReason}, this.IncidentAbortedOperationCompleted, userState);
        }
        
        private void OnIncidentAbortedOperationCompleted(object arg) {
            if ((this.IncidentAbortedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IncidentAbortedCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IncidentCompleted", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void IncidentCompleted(string strProcessName, int nIncident) {
            this.Invoke("IncidentCompleted", new object[] {
                        strProcessName,
                        nIncident});
        }
        
        /// <remarks/>
        public void IncidentCompletedAsync(string strProcessName, int nIncident) {
            this.IncidentCompletedAsync(strProcessName, nIncident, null);
        }
        
        /// <remarks/>
        public void IncidentCompletedAsync(string strProcessName, int nIncident, object userState) {
            if ((this.IncidentCompletedOperationCompleted == null)) {
                this.IncidentCompletedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIncidentCompletedOperationCompleted);
            }
            this.InvokeAsync("IncidentCompleted", new object[] {
                        strProcessName,
                        nIncident}, this.IncidentCompletedOperationCompleted, userState);
        }
        
        private void OnIncidentCompletedOperationCompleted(object arg) {
            if ((this.IncidentCompletedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IncidentCompletedCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IncidentInitiated", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void IncidentInitiated(string strProcessName, int nIncident) {
            this.Invoke("IncidentInitiated", new object[] {
                        strProcessName,
                        nIncident});
        }
        
        /// <remarks/>
        public void IncidentInitiatedAsync(string strProcessName, int nIncident) {
            this.IncidentInitiatedAsync(strProcessName, nIncident, null);
        }
        
        /// <remarks/>
        public void IncidentInitiatedAsync(string strProcessName, int nIncident, object userState) {
            if ((this.IncidentInitiatedOperationCompleted == null)) {
                this.IncidentInitiatedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIncidentInitiatedOperationCompleted);
            }
            this.InvokeAsync("IncidentInitiated", new object[] {
                        strProcessName,
                        nIncident}, this.IncidentInitiatedOperationCompleted, userState);
        }
        
        private void OnIncidentInitiatedOperationCompleted(object arg) {
            if ((this.IncidentInitiatedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IncidentInitiatedCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/QueueTaskActivated", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void QueueTaskActivated(string strProcessName, int nIncident, string strTaskId) {
            this.Invoke("QueueTaskActivated", new object[] {
                        strProcessName,
                        nIncident,
                        strTaskId});
        }
        
        /// <remarks/>
        public void QueueTaskActivatedAsync(string strProcessName, int nIncident, string strTaskId) {
            this.QueueTaskActivatedAsync(strProcessName, nIncident, strTaskId, null);
        }
        
        /// <remarks/>
        public void QueueTaskActivatedAsync(string strProcessName, int nIncident, string strTaskId, object userState) {
            if ((this.QueueTaskActivatedOperationCompleted == null)) {
                this.QueueTaskActivatedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueueTaskActivatedOperationCompleted);
            }
            this.InvokeAsync("QueueTaskActivated", new object[] {
                        strProcessName,
                        nIncident,
                        strTaskId}, this.QueueTaskActivatedOperationCompleted, userState);
        }
        
        private void OnQueueTaskActivatedOperationCompleted(object arg) {
            if ((this.QueueTaskActivatedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueueTaskActivatedCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/StepAborted", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void StepAborted(string strProcessName, int nIncident, int nStepType, string strStepId, string strStepLabel) {
            this.Invoke("StepAborted", new object[] {
                        strProcessName,
                        nIncident,
                        nStepType,
                        strStepId,
                        strStepLabel});
        }
        
        /// <remarks/>
        public void StepAbortedAsync(string strProcessName, int nIncident, int nStepType, string strStepId, string strStepLabel) {
            this.StepAbortedAsync(strProcessName, nIncident, nStepType, strStepId, strStepLabel, null);
        }
        
        /// <remarks/>
        public void StepAbortedAsync(string strProcessName, int nIncident, int nStepType, string strStepId, string strStepLabel, object userState) {
            if ((this.StepAbortedOperationCompleted == null)) {
                this.StepAbortedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStepAbortedOperationCompleted);
            }
            this.InvokeAsync("StepAborted", new object[] {
                        strProcessName,
                        nIncident,
                        nStepType,
                        strStepId,
                        strStepLabel}, this.StepAbortedOperationCompleted, userState);
        }
        
        private void OnStepAbortedOperationCompleted(object arg) {
            if ((this.StepAbortedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StepAbortedCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/TaskActivated", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void TaskActivated(string strProcessName, int nIncident, int nStepType, string strTaskId) {
            this.Invoke("TaskActivated", new object[] {
                        strProcessName,
                        nIncident,
                        nStepType,
                        strTaskId});
        }
        
        /// <remarks/>
        public void TaskActivatedAsync(string strProcessName, int nIncident, int nStepType, string strTaskId) {
            this.TaskActivatedAsync(strProcessName, nIncident, nStepType, strTaskId, null);
        }
        
        /// <remarks/>
        public void TaskActivatedAsync(string strProcessName, int nIncident, int nStepType, string strTaskId, object userState) {
            if ((this.TaskActivatedOperationCompleted == null)) {
                this.TaskActivatedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTaskActivatedOperationCompleted);
            }
            this.InvokeAsync("TaskActivated", new object[] {
                        strProcessName,
                        nIncident,
                        nStepType,
                        strTaskId}, this.TaskActivatedOperationCompleted, userState);
        }
        
        private void OnTaskActivatedOperationCompleted(object arg) {
            if ((this.TaskActivatedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TaskActivatedCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/TaskAssigned", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void TaskAssigned(string strProcessName, int nIncident, string strTaskId, string strAssignedUser) {
            this.Invoke("TaskAssigned", new object[] {
                        strProcessName,
                        nIncident,
                        strTaskId,
                        strAssignedUser});
        }
        
        /// <remarks/>
        public void TaskAssignedAsync(string strProcessName, int nIncident, string strTaskId, string strAssignedUser) {
            this.TaskAssignedAsync(strProcessName, nIncident, strTaskId, strAssignedUser, null);
        }
        
        /// <remarks/>
        public void TaskAssignedAsync(string strProcessName, int nIncident, string strTaskId, string strAssignedUser, object userState) {
            if ((this.TaskAssignedOperationCompleted == null)) {
                this.TaskAssignedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTaskAssignedOperationCompleted);
            }
            this.InvokeAsync("TaskAssigned", new object[] {
                        strProcessName,
                        nIncident,
                        strTaskId,
                        strAssignedUser}, this.TaskAssignedOperationCompleted, userState);
        }
        
        private void OnTaskAssignedOperationCompleted(object arg) {
            if ((this.TaskAssignedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TaskAssignedCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/TaskCompleted", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void TaskCompleted(string strProcessName, int nIncident, int nStepType, string strTaskId) {
            this.Invoke("TaskCompleted", new object[] {
                        strProcessName,
                        nIncident,
                        nStepType,
                        strTaskId});
        }
        
        /// <remarks/>
        public void TaskCompletedAsync(string strProcessName, int nIncident, int nStepType, string strTaskId) {
            this.TaskCompletedAsync(strProcessName, nIncident, nStepType, strTaskId, null);
        }
        
        /// <remarks/>
        public void TaskCompletedAsync(string strProcessName, int nIncident, int nStepType, string strTaskId, object userState) {
            if ((this.TaskCompletedOperationCompleted == null)) {
                this.TaskCompletedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTaskCompletedOperationCompleted);
            }
            this.InvokeAsync("TaskCompleted", new object[] {
                        strProcessName,
                        nIncident,
                        nStepType,
                        strTaskId}, this.TaskCompletedOperationCompleted, userState);
        }
        
        private void OnTaskCompletedOperationCompleted(object arg) {
            if ((this.TaskCompletedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TaskCompletedCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/TaskConferred", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void TaskConferred(string strProcessName, int nIncident, string strTaskId, string strUser) {
            this.Invoke("TaskConferred", new object[] {
                        strProcessName,
                        nIncident,
                        strTaskId,
                        strUser});
        }
        
        /// <remarks/>
        public void TaskConferredAsync(string strProcessName, int nIncident, string strTaskId, string strUser) {
            this.TaskConferredAsync(strProcessName, nIncident, strTaskId, strUser, null);
        }
        
        /// <remarks/>
        public void TaskConferredAsync(string strProcessName, int nIncident, string strTaskId, string strUser, object userState) {
            if ((this.TaskConferredOperationCompleted == null)) {
                this.TaskConferredOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTaskConferredOperationCompleted);
            }
            this.InvokeAsync("TaskConferred", new object[] {
                        strProcessName,
                        nIncident,
                        strTaskId,
                        strUser}, this.TaskConferredOperationCompleted, userState);
        }
        
        private void OnTaskConferredOperationCompleted(object arg) {
            if ((this.TaskConferredCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TaskConferredCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/TaskDelayed", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void TaskDelayed(string strProcessName, int nIncident, string strTaskId) {
            this.Invoke("TaskDelayed", new object[] {
                        strProcessName,
                        nIncident,
                        strTaskId});
        }
        
        /// <remarks/>
        public void TaskDelayedAsync(string strProcessName, int nIncident, string strTaskId) {
            this.TaskDelayedAsync(strProcessName, nIncident, strTaskId, null);
        }
        
        /// <remarks/>
        public void TaskDelayedAsync(string strProcessName, int nIncident, string strTaskId, object userState) {
            if ((this.TaskDelayedOperationCompleted == null)) {
                this.TaskDelayedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTaskDelayedOperationCompleted);
            }
            this.InvokeAsync("TaskDelayed", new object[] {
                        strProcessName,
                        nIncident,
                        strTaskId}, this.TaskDelayedOperationCompleted, userState);
        }
        
        private void OnTaskDelayedOperationCompleted(object arg) {
            if ((this.TaskDelayedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TaskDelayedCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/TaskDeletedOnMinResponseComplete", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void TaskDeletedOnMinResponseComplete(string strProcessName, int nIncident, string strTaskId) {
            this.Invoke("TaskDeletedOnMinResponseComplete", new object[] {
                        strProcessName,
                        nIncident,
                        strTaskId});
        }
        
        /// <remarks/>
        public void TaskDeletedOnMinResponseCompleteAsync(string strProcessName, int nIncident, string strTaskId) {
            this.TaskDeletedOnMinResponseCompleteAsync(strProcessName, nIncident, strTaskId, null);
        }
        
        /// <remarks/>
        public void TaskDeletedOnMinResponseCompleteAsync(string strProcessName, int nIncident, string strTaskId, object userState) {
            if ((this.TaskDeletedOnMinResponseCompleteOperationCompleted == null)) {
                this.TaskDeletedOnMinResponseCompleteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTaskDeletedOnMinResponseCompleteOperationCompleted);
            }
            this.InvokeAsync("TaskDeletedOnMinResponseComplete", new object[] {
                        strProcessName,
                        nIncident,
                        strTaskId}, this.TaskDeletedOnMinResponseCompleteOperationCompleted, userState);
        }
        
        private void OnTaskDeletedOnMinResponseCompleteOperationCompleted(object arg) {
            if ((this.TaskDeletedOnMinResponseCompleteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TaskDeletedOnMinResponseCompleteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/TaskLate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void TaskLate(string strProcessName, int nIncident, string strTaskId) {
            this.Invoke("TaskLate", new object[] {
                        strProcessName,
                        nIncident,
                        strTaskId});
        }
        
        /// <remarks/>
        public void TaskLateAsync(string strProcessName, int nIncident, string strTaskId) {
            this.TaskLateAsync(strProcessName, nIncident, strTaskId, null);
        }
        
        /// <remarks/>
        public void TaskLateAsync(string strProcessName, int nIncident, string strTaskId, object userState) {
            if ((this.TaskLateOperationCompleted == null)) {
                this.TaskLateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTaskLateOperationCompleted);
            }
            this.InvokeAsync("TaskLate", new object[] {
                        strProcessName,
                        nIncident,
                        strTaskId}, this.TaskLateOperationCompleted, userState);
        }
        
        private void OnTaskLateOperationCompleted(object arg) {
            if ((this.TaskLateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TaskLateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/TaskResubmitted", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void TaskResubmitted(string strProcessName, int nIncident, string strTaskId) {
            this.Invoke("TaskResubmitted", new object[] {
                        strProcessName,
                        nIncident,
                        strTaskId});
        }
        
        /// <remarks/>
        public void TaskResubmittedAsync(string strProcessName, int nIncident, string strTaskId) {
            this.TaskResubmittedAsync(strProcessName, nIncident, strTaskId, null);
        }
        
        /// <remarks/>
        public void TaskResubmittedAsync(string strProcessName, int nIncident, string strTaskId, object userState) {
            if ((this.TaskResubmittedOperationCompleted == null)) {
                this.TaskResubmittedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTaskResubmittedOperationCompleted);
            }
            this.InvokeAsync("TaskResubmitted", new object[] {
                        strProcessName,
                        nIncident,
                        strTaskId}, this.TaskResubmittedOperationCompleted, userState);
        }
        
        private void OnTaskResubmittedOperationCompleted(object arg) {
            if ((this.TaskResubmittedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TaskResubmittedCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/TaskReturned", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void TaskReturned(string strProcessName, int nIncident, int nStepType, string strTaskId) {
            this.Invoke("TaskReturned", new object[] {
                        strProcessName,
                        nIncident,
                        nStepType,
                        strTaskId});
        }
        
        /// <remarks/>
        public void TaskReturnedAsync(string strProcessName, int nIncident, int nStepType, string strTaskId) {
            this.TaskReturnedAsync(strProcessName, nIncident, nStepType, strTaskId, null);
        }
        
        /// <remarks/>
        public void TaskReturnedAsync(string strProcessName, int nIncident, int nStepType, string strTaskId, object userState) {
            if ((this.TaskReturnedOperationCompleted == null)) {
                this.TaskReturnedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTaskReturnedOperationCompleted);
            }
            this.InvokeAsync("TaskReturned", new object[] {
                        strProcessName,
                        nIncident,
                        nStepType,
                        strTaskId}, this.TaskReturnedOperationCompleted, userState);
        }
        
        private void OnTaskReturnedOperationCompleted(object arg) {
            if ((this.TaskReturnedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TaskReturnedCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/TaskSubmitFailed", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void TaskSubmitFailed(string strTaskId) {
            this.Invoke("TaskSubmitFailed", new object[] {
                        strTaskId});
        }
        
        /// <remarks/>
        public void TaskSubmitFailedAsync(string strTaskId) {
            this.TaskSubmitFailedAsync(strTaskId, null);
        }
        
        /// <remarks/>
        public void TaskSubmitFailedAsync(string strTaskId, object userState) {
            if ((this.TaskSubmitFailedOperationCompleted == null)) {
                this.TaskSubmitFailedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTaskSubmitFailedOperationCompleted);
            }
            this.InvokeAsync("TaskSubmitFailed", new object[] {
                        strTaskId}, this.TaskSubmitFailedOperationCompleted, userState);
        }
        
        private void OnTaskSubmitFailedOperationCompleted(object arg) {
            if ((this.TaskSubmitFailedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TaskSubmitFailedCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/TasksPerDayThresholdReached", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void TasksPerDayThresholdReached(long lTasksPerDayLimit, long lThreshold) {
            this.Invoke("TasksPerDayThresholdReached", new object[] {
                        lTasksPerDayLimit,
                        lThreshold});
        }
        
        /// <remarks/>
        public void TasksPerDayThresholdReachedAsync(long lTasksPerDayLimit, long lThreshold) {
            this.TasksPerDayThresholdReachedAsync(lTasksPerDayLimit, lThreshold, null);
        }
        
        /// <remarks/>
        public void TasksPerDayThresholdReachedAsync(long lTasksPerDayLimit, long lThreshold, object userState) {
            if ((this.TasksPerDayThresholdReachedOperationCompleted == null)) {
                this.TasksPerDayThresholdReachedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTasksPerDayThresholdReachedOperationCompleted);
            }
            this.InvokeAsync("TasksPerDayThresholdReached", new object[] {
                        lTasksPerDayLimit,
                        lThreshold}, this.TasksPerDayThresholdReachedOperationCompleted, userState);
        }
        
        private void OnTasksPerDayThresholdReachedOperationCompleted(object arg) {
            if ((this.TasksPerDayThresholdReachedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TasksPerDayThresholdReachedCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckInTask", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CheckInTask(string strTaskId) {
            this.Invoke("CheckInTask", new object[] {
                        strTaskId});
        }
        
        /// <remarks/>
        public void CheckInTaskAsync(string strTaskId) {
            this.CheckInTaskAsync(strTaskId, null);
        }
        
        /// <remarks/>
        public void CheckInTaskAsync(string strTaskId, object userState) {
            if ((this.CheckInTaskOperationCompleted == null)) {
                this.CheckInTaskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckInTaskOperationCompleted);
            }
            this.InvokeAsync("CheckInTask", new object[] {
                        strTaskId}, this.CheckInTaskOperationCompleted, userState);
        }
        
        private void OnCheckInTaskOperationCompleted(object arg) {
            if ((this.CheckInTaskCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckInTaskCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckOutTask", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CheckOutTask(string strTaskId) {
            this.Invoke("CheckOutTask", new object[] {
                        strTaskId});
        }
        
        /// <remarks/>
        public void CheckOutTaskAsync(string strTaskId) {
            this.CheckOutTaskAsync(strTaskId, null);
        }
        
        /// <remarks/>
        public void CheckOutTaskAsync(string strTaskId, object userState) {
            if ((this.CheckOutTaskOperationCompleted == null)) {
                this.CheckOutTaskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckOutTaskOperationCompleted);
            }
            this.InvokeAsync("CheckOutTask", new object[] {
                        strTaskId}, this.CheckOutTaskOperationCompleted, userState);
        }
        
        private void OnCheckOutTaskOperationCompleted(object arg) {
            if ((this.CheckOutTaskCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckOutTaskCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FindReplaceIncident", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void FindReplaceIncident(string strProcessName, int nIncident) {
            this.Invoke("FindReplaceIncident", new object[] {
                        strProcessName,
                        nIncident});
        }
        
        /// <remarks/>
        public void FindReplaceIncidentAsync(string strProcessName, int nIncident) {
            this.FindReplaceIncidentAsync(strProcessName, nIncident, null);
        }
        
        /// <remarks/>
        public void FindReplaceIncidentAsync(string strProcessName, int nIncident, object userState) {
            if ((this.FindReplaceIncidentOperationCompleted == null)) {
                this.FindReplaceIncidentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFindReplaceIncidentOperationCompleted);
            }
            this.InvokeAsync("FindReplaceIncident", new object[] {
                        strProcessName,
                        nIncident}, this.FindReplaceIncidentOperationCompleted, userState);
        }
        
        private void OnFindReplaceIncidentOperationCompleted(object arg) {
            if ((this.FindReplaceIncidentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FindReplaceIncidentCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FindReplaceTask", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void FindReplaceTask(string strTaskId) {
            this.Invoke("FindReplaceTask", new object[] {
                        strTaskId});
        }
        
        /// <remarks/>
        public void FindReplaceTaskAsync(string strTaskId) {
            this.FindReplaceTaskAsync(strTaskId, null);
        }
        
        /// <remarks/>
        public void FindReplaceTaskAsync(string strTaskId, object userState) {
            if ((this.FindReplaceTaskOperationCompleted == null)) {
                this.FindReplaceTaskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFindReplaceTaskOperationCompleted);
            }
            this.InvokeAsync("FindReplaceTask", new object[] {
                        strTaskId}, this.FindReplaceTaskOperationCompleted, userState);
        }
        
        private void OnFindReplaceTaskOperationCompleted(object arg) {
            if ((this.FindReplaceTaskCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FindReplaceTaskCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SaveTask", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SaveTask(string strTaskId) {
            this.Invoke("SaveTask", new object[] {
                        strTaskId});
        }
        
        /// <remarks/>
        public void SaveTaskAsync(string strTaskId) {
            this.SaveTaskAsync(strTaskId, null);
        }
        
        /// <remarks/>
        public void SaveTaskAsync(string strTaskId, object userState) {
            if ((this.SaveTaskOperationCompleted == null)) {
                this.SaveTaskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveTaskOperationCompleted);
            }
            this.InvokeAsync("SaveTask", new object[] {
                        strTaskId}, this.SaveTaskOperationCompleted, userState);
        }
        
        private void OnSaveTaskOperationCompleted(object arg) {
            if ((this.SaveTaskCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveTaskCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LogInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void LogInfo(string info) {
            this.Invoke("LogInfo", new object[] {
                        info});
        }
        
        /// <remarks/>
        public void LogInfoAsync(string info) {
            this.LogInfoAsync(info, null);
        }
        
        /// <remarks/>
        public void LogInfoAsync(string info, object userState) {
            if ((this.LogInfoOperationCompleted == null)) {
                this.LogInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogInfoOperationCompleted);
            }
            this.InvokeAsync("LogInfo", new object[] {
                        info}, this.LogInfoOperationCompleted, userState);
        }
        
        private void OnLogInfoOperationCompleted(object arg) {
            if ((this.LogInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogInfoCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LogError", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void LogError(string error) {
            this.Invoke("LogError", new object[] {
                        error});
        }
        
        /// <remarks/>
        public void LogErrorAsync(string error) {
            this.LogErrorAsync(error, null);
        }
        
        /// <remarks/>
        public void LogErrorAsync(string error, object userState) {
            if ((this.LogErrorOperationCompleted == null)) {
                this.LogErrorOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogErrorOperationCompleted);
            }
            this.InvokeAsync("LogError", new object[] {
                        error}, this.LogErrorOperationCompleted, userState);
        }
        
        private void OnLogErrorOperationCompleted(object arg) {
            if ((this.LogErrorCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogErrorCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void CompletedTaskDeletedCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void IncidentAbortedCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void IncidentCompletedCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void IncidentInitiatedCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void QueueTaskActivatedCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void StepAbortedCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void TaskActivatedCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void TaskAssignedCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void TaskCompletedCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void TaskConferredCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void TaskDelayedCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void TaskDeletedOnMinResponseCompleteCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void TaskLateCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void TaskResubmittedCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void TaskReturnedCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void TaskSubmitFailedCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void TasksPerDayThresholdReachedCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void CheckInTaskCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void CheckOutTaskCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void FindReplaceIncidentCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void FindReplaceTaskCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void SaveTaskCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void LogInfoCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void LogErrorCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591