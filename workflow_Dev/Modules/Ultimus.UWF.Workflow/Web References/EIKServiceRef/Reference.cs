//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18408
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.18408 版自动生成。
// 
#pragma warning disable 1591

namespace Ultimus.UWF.Workflow.EIKServiceRef {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="EIKServiceSoap", Namespace="http://tempuri.org/")]
    public partial class EIKService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetInitTaskListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDraftTaskListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMyTaskListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMyTaskCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMyApprovalListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMyApprovalCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMyRequestListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMyRequestCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTaskListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTaskListCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTaskEntityOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTaskEntityByNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTaskUrlOperationCompleted;
        
        private System.Threading.SendOrPostCallback SubmitTaskOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReturnTaskOperationCompleted;
        
        private System.Threading.SendOrPostCallback RejectTaskOperationCompleted;
        
        private System.Threading.SendOrPostCallback AbortIncidentOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCurrentApproverOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetViewTaskIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetGraphicalStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetStepTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback AssignTaskOperationCompleted;
        
        private System.Threading.SendOrPostCallback AssignAllCurrentTasksOperationCompleted;
        
        private System.Threading.SendOrPostCallback AssignAllFutureTasksOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetVariableListOperationCompleted;
        
        private System.Threading.SendOrPostCallback AssignProcessFutureTasksOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetInitTaskEntityOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteTaskOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetInitTaskEntityByProcessNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServerEntityOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetServerEntityOperationCompleted;
        
        private System.Threading.SendOrPostCallback LogoutUserOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public EIKService() {
            this.Url = global::Ultimus.UWF.Workflow.Properties.Settings.Default.Ultimus_UWF_Workflow_TaskV8Service_TaskService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetInitTaskListCompletedEventHandler GetInitTaskListCompleted;
        
        /// <remarks/>
        public event GetDraftTaskListCompletedEventHandler GetDraftTaskListCompleted;
        
        /// <remarks/>
        public event GetMyTaskListCompletedEventHandler GetMyTaskListCompleted;
        
        /// <remarks/>
        public event GetMyTaskCountCompletedEventHandler GetMyTaskCountCompleted;
        
        /// <remarks/>
        public event GetMyApprovalListCompletedEventHandler GetMyApprovalListCompleted;
        
        /// <remarks/>
        public event GetMyApprovalCountCompletedEventHandler GetMyApprovalCountCompleted;
        
        /// <remarks/>
        public event GetMyRequestListCompletedEventHandler GetMyRequestListCompleted;
        
        /// <remarks/>
        public event GetMyRequestCountCompletedEventHandler GetMyRequestCountCompleted;
        
        /// <remarks/>
        public event GetTaskListCompletedEventHandler GetTaskListCompleted;
        
        /// <remarks/>
        public event GetTaskListCountCompletedEventHandler GetTaskListCountCompleted;
        
        /// <remarks/>
        public event GetTaskEntityCompletedEventHandler GetTaskEntityCompleted;
        
        /// <remarks/>
        public event GetTaskEntityByNameCompletedEventHandler GetTaskEntityByNameCompleted;
        
        /// <remarks/>
        public event GetTaskUrlCompletedEventHandler GetTaskUrlCompleted;
        
        /// <remarks/>
        public event SubmitTaskCompletedEventHandler SubmitTaskCompleted;
        
        /// <remarks/>
        public event ReturnTaskCompletedEventHandler ReturnTaskCompleted;
        
        /// <remarks/>
        public event RejectTaskCompletedEventHandler RejectTaskCompleted;
        
        /// <remarks/>
        public event AbortIncidentCompletedEventHandler AbortIncidentCompleted;
        
        /// <remarks/>
        public event GetCurrentApproverCompletedEventHandler GetCurrentApproverCompleted;
        
        /// <remarks/>
        public event GetViewTaskIdCompletedEventHandler GetViewTaskIdCompleted;
        
        /// <remarks/>
        public event GetGraphicalStatusCompletedEventHandler GetGraphicalStatusCompleted;
        
        /// <remarks/>
        public event GetStepTypeCompletedEventHandler GetStepTypeCompleted;
        
        /// <remarks/>
        public event AssignTaskCompletedEventHandler AssignTaskCompleted;
        
        /// <remarks/>
        public event AssignAllCurrentTasksCompletedEventHandler AssignAllCurrentTasksCompleted;
        
        /// <remarks/>
        public event AssignAllFutureTasksCompletedEventHandler AssignAllFutureTasksCompleted;
        
        /// <remarks/>
        public event GetVariableListCompletedEventHandler GetVariableListCompleted;
        
        /// <remarks/>
        public event AssignProcessFutureTasksCompletedEventHandler AssignProcessFutureTasksCompleted;
        
        /// <remarks/>
        public event GetInitTaskEntityCompletedEventHandler GetInitTaskEntityCompleted;
        
        /// <remarks/>
        public event DeleteTaskCompletedEventHandler DeleteTaskCompleted;
        
        /// <remarks/>
        public event GetInitTaskEntityByProcessNameCompletedEventHandler GetInitTaskEntityByProcessNameCompleted;
        
        /// <remarks/>
        public event GetServerEntityCompletedEventHandler GetServerEntityCompleted;
        
        /// <remarks/>
        public event SetServerEntityCompletedEventHandler SetServerEntityCompleted;
        
        /// <remarks/>
        public event LogoutUserCompletedEventHandler LogoutUserCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetInitTaskList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TaskEntity[] GetInitTaskList(string loginName, string filter) {
            object[] results = this.Invoke("GetInitTaskList", new object[] {
                        loginName,
                        filter});
            return ((TaskEntity[])(results[0]));
        }
        
        /// <remarks/>
        public void GetInitTaskListAsync(string loginName, string filter) {
            this.GetInitTaskListAsync(loginName, filter, null);
        }
        
        /// <remarks/>
        public void GetInitTaskListAsync(string loginName, string filter, object userState) {
            if ((this.GetInitTaskListOperationCompleted == null)) {
                this.GetInitTaskListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInitTaskListOperationCompleted);
            }
            this.InvokeAsync("GetInitTaskList", new object[] {
                        loginName,
                        filter}, this.GetInitTaskListOperationCompleted, userState);
        }
        
        private void OnGetInitTaskListOperationCompleted(object arg) {
            if ((this.GetInitTaskListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetInitTaskListCompleted(this, new GetInitTaskListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDraftTaskList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TaskEntity[] GetDraftTaskList(string loginName, string filter) {
            object[] results = this.Invoke("GetDraftTaskList", new object[] {
                        loginName,
                        filter});
            return ((TaskEntity[])(results[0]));
        }
        
        /// <remarks/>
        public void GetDraftTaskListAsync(string loginName, string filter) {
            this.GetDraftTaskListAsync(loginName, filter, null);
        }
        
        /// <remarks/>
        public void GetDraftTaskListAsync(string loginName, string filter, object userState) {
            if ((this.GetDraftTaskListOperationCompleted == null)) {
                this.GetDraftTaskListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDraftTaskListOperationCompleted);
            }
            this.InvokeAsync("GetDraftTaskList", new object[] {
                        loginName,
                        filter}, this.GetDraftTaskListOperationCompleted, userState);
        }
        
        private void OnGetDraftTaskListOperationCompleted(object arg) {
            if ((this.GetDraftTaskListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDraftTaskListCompleted(this, new GetDraftTaskListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMyTaskList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TaskEntity[] GetMyTaskList(string loginName, string filter, ParameterEntity[] paras, string sort, int skipResults, int maxResults) {
            object[] results = this.Invoke("GetMyTaskList", new object[] {
                        loginName,
                        filter,
                        paras,
                        sort,
                        skipResults,
                        maxResults});
            return ((TaskEntity[])(results[0]));
        }
        
        /// <remarks/>
        public void GetMyTaskListAsync(string loginName, string filter, ParameterEntity[] paras, string sort, int skipResults, int maxResults) {
            this.GetMyTaskListAsync(loginName, filter, paras, sort, skipResults, maxResults, null);
        }
        
        /// <remarks/>
        public void GetMyTaskListAsync(string loginName, string filter, ParameterEntity[] paras, string sort, int skipResults, int maxResults, object userState) {
            if ((this.GetMyTaskListOperationCompleted == null)) {
                this.GetMyTaskListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMyTaskListOperationCompleted);
            }
            this.InvokeAsync("GetMyTaskList", new object[] {
                        loginName,
                        filter,
                        paras,
                        sort,
                        skipResults,
                        maxResults}, this.GetMyTaskListOperationCompleted, userState);
        }
        
        private void OnGetMyTaskListOperationCompleted(object arg) {
            if ((this.GetMyTaskListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMyTaskListCompleted(this, new GetMyTaskListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMyTaskCount", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetMyTaskCount(string loginName, string filter, ParameterEntity[] paras) {
            object[] results = this.Invoke("GetMyTaskCount", new object[] {
                        loginName,
                        filter,
                        paras});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetMyTaskCountAsync(string loginName, string filter, ParameterEntity[] paras) {
            this.GetMyTaskCountAsync(loginName, filter, paras, null);
        }
        
        /// <remarks/>
        public void GetMyTaskCountAsync(string loginName, string filter, ParameterEntity[] paras, object userState) {
            if ((this.GetMyTaskCountOperationCompleted == null)) {
                this.GetMyTaskCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMyTaskCountOperationCompleted);
            }
            this.InvokeAsync("GetMyTaskCount", new object[] {
                        loginName,
                        filter,
                        paras}, this.GetMyTaskCountOperationCompleted, userState);
        }
        
        private void OnGetMyTaskCountOperationCompleted(object arg) {
            if ((this.GetMyTaskCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMyTaskCountCompleted(this, new GetMyTaskCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMyApprovalList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TaskEntity[] GetMyApprovalList(string loginName, string filter, ParameterEntity[] paras, string sort, int skipResults, int maxResults) {
            object[] results = this.Invoke("GetMyApprovalList", new object[] {
                        loginName,
                        filter,
                        paras,
                        sort,
                        skipResults,
                        maxResults});
            return ((TaskEntity[])(results[0]));
        }
        
        /// <remarks/>
        public void GetMyApprovalListAsync(string loginName, string filter, ParameterEntity[] paras, string sort, int skipResults, int maxResults) {
            this.GetMyApprovalListAsync(loginName, filter, paras, sort, skipResults, maxResults, null);
        }
        
        /// <remarks/>
        public void GetMyApprovalListAsync(string loginName, string filter, ParameterEntity[] paras, string sort, int skipResults, int maxResults, object userState) {
            if ((this.GetMyApprovalListOperationCompleted == null)) {
                this.GetMyApprovalListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMyApprovalListOperationCompleted);
            }
            this.InvokeAsync("GetMyApprovalList", new object[] {
                        loginName,
                        filter,
                        paras,
                        sort,
                        skipResults,
                        maxResults}, this.GetMyApprovalListOperationCompleted, userState);
        }
        
        private void OnGetMyApprovalListOperationCompleted(object arg) {
            if ((this.GetMyApprovalListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMyApprovalListCompleted(this, new GetMyApprovalListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMyApprovalCount", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetMyApprovalCount(string loginName, string filter, ParameterEntity[] paras) {
            object[] results = this.Invoke("GetMyApprovalCount", new object[] {
                        loginName,
                        filter,
                        paras});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetMyApprovalCountAsync(string loginName, string filter, ParameterEntity[] paras) {
            this.GetMyApprovalCountAsync(loginName, filter, paras, null);
        }
        
        /// <remarks/>
        public void GetMyApprovalCountAsync(string loginName, string filter, ParameterEntity[] paras, object userState) {
            if ((this.GetMyApprovalCountOperationCompleted == null)) {
                this.GetMyApprovalCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMyApprovalCountOperationCompleted);
            }
            this.InvokeAsync("GetMyApprovalCount", new object[] {
                        loginName,
                        filter,
                        paras}, this.GetMyApprovalCountOperationCompleted, userState);
        }
        
        private void OnGetMyApprovalCountOperationCompleted(object arg) {
            if ((this.GetMyApprovalCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMyApprovalCountCompleted(this, new GetMyApprovalCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMyRequestList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TaskEntity[] GetMyRequestList(string loginName, string filter, ParameterEntity[] paras, string sort, int skipResults, int maxResults) {
            object[] results = this.Invoke("GetMyRequestList", new object[] {
                        loginName,
                        filter,
                        paras,
                        sort,
                        skipResults,
                        maxResults});
            return ((TaskEntity[])(results[0]));
        }
        
        /// <remarks/>
        public void GetMyRequestListAsync(string loginName, string filter, ParameterEntity[] paras, string sort, int skipResults, int maxResults) {
            this.GetMyRequestListAsync(loginName, filter, paras, sort, skipResults, maxResults, null);
        }
        
        /// <remarks/>
        public void GetMyRequestListAsync(string loginName, string filter, ParameterEntity[] paras, string sort, int skipResults, int maxResults, object userState) {
            if ((this.GetMyRequestListOperationCompleted == null)) {
                this.GetMyRequestListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMyRequestListOperationCompleted);
            }
            this.InvokeAsync("GetMyRequestList", new object[] {
                        loginName,
                        filter,
                        paras,
                        sort,
                        skipResults,
                        maxResults}, this.GetMyRequestListOperationCompleted, userState);
        }
        
        private void OnGetMyRequestListOperationCompleted(object arg) {
            if ((this.GetMyRequestListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMyRequestListCompleted(this, new GetMyRequestListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMyRequestCount", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetMyRequestCount(string loginName, string filter, ParameterEntity[] paras) {
            object[] results = this.Invoke("GetMyRequestCount", new object[] {
                        loginName,
                        filter,
                        paras});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetMyRequestCountAsync(string loginName, string filter, ParameterEntity[] paras) {
            this.GetMyRequestCountAsync(loginName, filter, paras, null);
        }
        
        /// <remarks/>
        public void GetMyRequestCountAsync(string loginName, string filter, ParameterEntity[] paras, object userState) {
            if ((this.GetMyRequestCountOperationCompleted == null)) {
                this.GetMyRequestCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMyRequestCountOperationCompleted);
            }
            this.InvokeAsync("GetMyRequestCount", new object[] {
                        loginName,
                        filter,
                        paras}, this.GetMyRequestCountOperationCompleted, userState);
        }
        
        private void OnGetMyRequestCountOperationCompleted(object arg) {
            if ((this.GetMyRequestCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMyRequestCountCompleted(this, new GetMyRequestCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTaskList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TaskEntity[] GetTaskList(string filter, ParameterEntity[] paras, string sort, int skipResults, int maxResults) {
            object[] results = this.Invoke("GetTaskList", new object[] {
                        filter,
                        paras,
                        sort,
                        skipResults,
                        maxResults});
            return ((TaskEntity[])(results[0]));
        }
        
        /// <remarks/>
        public void GetTaskListAsync(string filter, ParameterEntity[] paras, string sort, int skipResults, int maxResults) {
            this.GetTaskListAsync(filter, paras, sort, skipResults, maxResults, null);
        }
        
        /// <remarks/>
        public void GetTaskListAsync(string filter, ParameterEntity[] paras, string sort, int skipResults, int maxResults, object userState) {
            if ((this.GetTaskListOperationCompleted == null)) {
                this.GetTaskListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTaskListOperationCompleted);
            }
            this.InvokeAsync("GetTaskList", new object[] {
                        filter,
                        paras,
                        sort,
                        skipResults,
                        maxResults}, this.GetTaskListOperationCompleted, userState);
        }
        
        private void OnGetTaskListOperationCompleted(object arg) {
            if ((this.GetTaskListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTaskListCompleted(this, new GetTaskListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTaskListCount", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetTaskListCount(string filter, ParameterEntity[] paras) {
            object[] results = this.Invoke("GetTaskListCount", new object[] {
                        filter,
                        paras});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetTaskListCountAsync(string filter, ParameterEntity[] paras) {
            this.GetTaskListCountAsync(filter, paras, null);
        }
        
        /// <remarks/>
        public void GetTaskListCountAsync(string filter, ParameterEntity[] paras, object userState) {
            if ((this.GetTaskListCountOperationCompleted == null)) {
                this.GetTaskListCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTaskListCountOperationCompleted);
            }
            this.InvokeAsync("GetTaskListCount", new object[] {
                        filter,
                        paras}, this.GetTaskListCountOperationCompleted, userState);
        }
        
        private void OnGetTaskListCountOperationCompleted(object arg) {
            if ((this.GetTaskListCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTaskListCountCompleted(this, new GetTaskListCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTaskEntity", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TaskEntity GetTaskEntity(string taskID) {
            object[] results = this.Invoke("GetTaskEntity", new object[] {
                        taskID});
            return ((TaskEntity)(results[0]));
        }
        
        /// <remarks/>
        public void GetTaskEntityAsync(string taskID) {
            this.GetTaskEntityAsync(taskID, null);
        }
        
        /// <remarks/>
        public void GetTaskEntityAsync(string taskID, object userState) {
            if ((this.GetTaskEntityOperationCompleted == null)) {
                this.GetTaskEntityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTaskEntityOperationCompleted);
            }
            this.InvokeAsync("GetTaskEntity", new object[] {
                        taskID}, this.GetTaskEntityOperationCompleted, userState);
        }
        
        private void OnGetTaskEntityOperationCompleted(object arg) {
            if ((this.GetTaskEntityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTaskEntityCompleted(this, new GetTaskEntityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTaskEntityByName", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TaskEntity GetTaskEntityByName(string processName, int incident, string loginName) {
            object[] results = this.Invoke("GetTaskEntityByName", new object[] {
                        processName,
                        incident,
                        loginName});
            return ((TaskEntity)(results[0]));
        }
        
        /// <remarks/>
        public void GetTaskEntityByNameAsync(string processName, int incident, string loginName) {
            this.GetTaskEntityByNameAsync(processName, incident, loginName, null);
        }
        
        /// <remarks/>
        public void GetTaskEntityByNameAsync(string processName, int incident, string loginName, object userState) {
            if ((this.GetTaskEntityByNameOperationCompleted == null)) {
                this.GetTaskEntityByNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTaskEntityByNameOperationCompleted);
            }
            this.InvokeAsync("GetTaskEntityByName", new object[] {
                        processName,
                        incident,
                        loginName}, this.GetTaskEntityByNameOperationCompleted, userState);
        }
        
        private void OnGetTaskEntityByNameOperationCompleted(object arg) {
            if ((this.GetTaskEntityByNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTaskEntityByNameCompleted(this, new GetTaskEntityByNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTaskUrl", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetTaskUrl(string taskID, string type, string loginName) {
            object[] results = this.Invoke("GetTaskUrl", new object[] {
                        taskID,
                        type,
                        loginName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetTaskUrlAsync(string taskID, string type, string loginName) {
            this.GetTaskUrlAsync(taskID, type, loginName, null);
        }
        
        /// <remarks/>
        public void GetTaskUrlAsync(string taskID, string type, string loginName, object userState) {
            if ((this.GetTaskUrlOperationCompleted == null)) {
                this.GetTaskUrlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTaskUrlOperationCompleted);
            }
            this.InvokeAsync("GetTaskUrl", new object[] {
                        taskID,
                        type,
                        loginName}, this.GetTaskUrlOperationCompleted, userState);
        }
        
        private void OnGetTaskUrlOperationCompleted(object arg) {
            if ((this.GetTaskUrlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTaskUrlCompleted(this, new GetTaskUrlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SubmitTask", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int SubmitTask(TaskEntity task) {
            object[] results = this.Invoke("SubmitTask", new object[] {
                        task});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SubmitTaskAsync(TaskEntity task) {
            this.SubmitTaskAsync(task, null);
        }
        
        /// <remarks/>
        public void SubmitTaskAsync(TaskEntity task, object userState) {
            if ((this.SubmitTaskOperationCompleted == null)) {
                this.SubmitTaskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSubmitTaskOperationCompleted);
            }
            this.InvokeAsync("SubmitTask", new object[] {
                        task}, this.SubmitTaskOperationCompleted, userState);
        }
        
        private void OnSubmitTaskOperationCompleted(object arg) {
            if ((this.SubmitTaskCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SubmitTaskCompleted(this, new SubmitTaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ReturnTask", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ReturnTask(TaskEntity task) {
            this.Invoke("ReturnTask", new object[] {
                        task});
        }
        
        /// <remarks/>
        public void ReturnTaskAsync(TaskEntity task) {
            this.ReturnTaskAsync(task, null);
        }
        
        /// <remarks/>
        public void ReturnTaskAsync(TaskEntity task, object userState) {
            if ((this.ReturnTaskOperationCompleted == null)) {
                this.ReturnTaskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReturnTaskOperationCompleted);
            }
            this.InvokeAsync("ReturnTask", new object[] {
                        task}, this.ReturnTaskOperationCompleted, userState);
        }
        
        private void OnReturnTaskOperationCompleted(object arg) {
            if ((this.ReturnTaskCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReturnTaskCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RejectTask", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RejectTask(TaskEntity task) {
            this.Invoke("RejectTask", new object[] {
                        task});
        }
        
        /// <remarks/>
        public void RejectTaskAsync(TaskEntity task) {
            this.RejectTaskAsync(task, null);
        }
        
        /// <remarks/>
        public void RejectTaskAsync(TaskEntity task, object userState) {
            if ((this.RejectTaskOperationCompleted == null)) {
                this.RejectTaskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRejectTaskOperationCompleted);
            }
            this.InvokeAsync("RejectTask", new object[] {
                        task}, this.RejectTaskOperationCompleted, userState);
        }
        
        private void OnRejectTaskOperationCompleted(object arg) {
            if ((this.RejectTaskCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RejectTaskCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AbortIncident", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AbortIncident(TaskEntity task) {
            this.Invoke("AbortIncident", new object[] {
                        task});
        }
        
        /// <remarks/>
        public void AbortIncidentAsync(TaskEntity task) {
            this.AbortIncidentAsync(task, null);
        }
        
        /// <remarks/>
        public void AbortIncidentAsync(TaskEntity task, object userState) {
            if ((this.AbortIncidentOperationCompleted == null)) {
                this.AbortIncidentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAbortIncidentOperationCompleted);
            }
            this.InvokeAsync("AbortIncident", new object[] {
                        task}, this.AbortIncidentOperationCompleted, userState);
        }
        
        private void OnAbortIncidentOperationCompleted(object arg) {
            if ((this.AbortIncidentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AbortIncidentCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCurrentApprover", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCurrentApprover(string processName, int incident) {
            object[] results = this.Invoke("GetCurrentApprover", new object[] {
                        processName,
                        incident});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCurrentApproverAsync(string processName, int incident) {
            this.GetCurrentApproverAsync(processName, incident, null);
        }
        
        /// <remarks/>
        public void GetCurrentApproverAsync(string processName, int incident, object userState) {
            if ((this.GetCurrentApproverOperationCompleted == null)) {
                this.GetCurrentApproverOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCurrentApproverOperationCompleted);
            }
            this.InvokeAsync("GetCurrentApprover", new object[] {
                        processName,
                        incident}, this.GetCurrentApproverOperationCompleted, userState);
        }
        
        private void OnGetCurrentApproverOperationCompleted(object arg) {
            if ((this.GetCurrentApproverCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCurrentApproverCompleted(this, new GetCurrentApproverCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetViewTaskId", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetViewTaskId(string processName, int incident, string loginName) {
            object[] results = this.Invoke("GetViewTaskId", new object[] {
                        processName,
                        incident,
                        loginName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetViewTaskIdAsync(string processName, int incident, string loginName) {
            this.GetViewTaskIdAsync(processName, incident, loginName, null);
        }
        
        /// <remarks/>
        public void GetViewTaskIdAsync(string processName, int incident, string loginName, object userState) {
            if ((this.GetViewTaskIdOperationCompleted == null)) {
                this.GetViewTaskIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetViewTaskIdOperationCompleted);
            }
            this.InvokeAsync("GetViewTaskId", new object[] {
                        processName,
                        incident,
                        loginName}, this.GetViewTaskIdOperationCompleted, userState);
        }
        
        private void OnGetViewTaskIdOperationCompleted(object arg) {
            if ((this.GetViewTaskIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetViewTaskIdCompleted(this, new GetViewTaskIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetGraphicalStatus", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetGraphicalStatus(string processName, int incident) {
            object[] results = this.Invoke("GetGraphicalStatus", new object[] {
                        processName,
                        incident});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public void GetGraphicalStatusAsync(string processName, int incident) {
            this.GetGraphicalStatusAsync(processName, incident, null);
        }
        
        /// <remarks/>
        public void GetGraphicalStatusAsync(string processName, int incident, object userState) {
            if ((this.GetGraphicalStatusOperationCompleted == null)) {
                this.GetGraphicalStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetGraphicalStatusOperationCompleted);
            }
            this.InvokeAsync("GetGraphicalStatus", new object[] {
                        processName,
                        incident}, this.GetGraphicalStatusOperationCompleted, userState);
        }
        
        private void OnGetGraphicalStatusOperationCompleted(object arg) {
            if ((this.GetGraphicalStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetGraphicalStatusCompleted(this, new GetGraphicalStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetStepType", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetStepType(string taskID, string stepID) {
            object[] results = this.Invoke("GetStepType", new object[] {
                        taskID,
                        stepID});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetStepTypeAsync(string taskID, string stepID) {
            this.GetStepTypeAsync(taskID, stepID, null);
        }
        
        /// <remarks/>
        public void GetStepTypeAsync(string taskID, string stepID, object userState) {
            if ((this.GetStepTypeOperationCompleted == null)) {
                this.GetStepTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStepTypeOperationCompleted);
            }
            this.InvokeAsync("GetStepType", new object[] {
                        taskID,
                        stepID}, this.GetStepTypeOperationCompleted, userState);
        }
        
        private void OnGetStepTypeOperationCompleted(object arg) {
            if ((this.GetStepTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStepTypeCompleted(this, new GetStepTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AssignTask", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AssignTask(string taskId, string toUser) {
            object[] results = this.Invoke("AssignTask", new object[] {
                        taskId,
                        toUser});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AssignTaskAsync(string taskId, string toUser) {
            this.AssignTaskAsync(taskId, toUser, null);
        }
        
        /// <remarks/>
        public void AssignTaskAsync(string taskId, string toUser, object userState) {
            if ((this.AssignTaskOperationCompleted == null)) {
                this.AssignTaskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAssignTaskOperationCompleted);
            }
            this.InvokeAsync("AssignTask", new object[] {
                        taskId,
                        toUser}, this.AssignTaskOperationCompleted, userState);
        }
        
        private void OnAssignTaskOperationCompleted(object arg) {
            if ((this.AssignTaskCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AssignTaskCompleted(this, new AssignTaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AssignAllCurrentTasks", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AssignAllCurrentTasks(string fromUser, string toUser) {
            object[] results = this.Invoke("AssignAllCurrentTasks", new object[] {
                        fromUser,
                        toUser});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AssignAllCurrentTasksAsync(string fromUser, string toUser) {
            this.AssignAllCurrentTasksAsync(fromUser, toUser, null);
        }
        
        /// <remarks/>
        public void AssignAllCurrentTasksAsync(string fromUser, string toUser, object userState) {
            if ((this.AssignAllCurrentTasksOperationCompleted == null)) {
                this.AssignAllCurrentTasksOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAssignAllCurrentTasksOperationCompleted);
            }
            this.InvokeAsync("AssignAllCurrentTasks", new object[] {
                        fromUser,
                        toUser}, this.AssignAllCurrentTasksOperationCompleted, userState);
        }
        
        private void OnAssignAllCurrentTasksOperationCompleted(object arg) {
            if ((this.AssignAllCurrentTasksCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AssignAllCurrentTasksCompleted(this, new AssignAllCurrentTasksCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AssignAllFutureTasks", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AssignAllFutureTasks(string fromUser, string toUser, System.DateTime toDate) {
            object[] results = this.Invoke("AssignAllFutureTasks", new object[] {
                        fromUser,
                        toUser,
                        toDate});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AssignAllFutureTasksAsync(string fromUser, string toUser, System.DateTime toDate) {
            this.AssignAllFutureTasksAsync(fromUser, toUser, toDate, null);
        }
        
        /// <remarks/>
        public void AssignAllFutureTasksAsync(string fromUser, string toUser, System.DateTime toDate, object userState) {
            if ((this.AssignAllFutureTasksOperationCompleted == null)) {
                this.AssignAllFutureTasksOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAssignAllFutureTasksOperationCompleted);
            }
            this.InvokeAsync("AssignAllFutureTasks", new object[] {
                        fromUser,
                        toUser,
                        toDate}, this.AssignAllFutureTasksOperationCompleted, userState);
        }
        
        private void OnAssignAllFutureTasksOperationCompleted(object arg) {
            if ((this.AssignAllFutureTasksCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AssignAllFutureTasksCompleted(this, new AssignAllFutureTasksCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetVariableList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public VarEntity[] GetVariableList(string taskID) {
            object[] results = this.Invoke("GetVariableList", new object[] {
                        taskID});
            return ((VarEntity[])(results[0]));
        }
        
        /// <remarks/>
        public void GetVariableListAsync(string taskID) {
            this.GetVariableListAsync(taskID, null);
        }
        
        /// <remarks/>
        public void GetVariableListAsync(string taskID, object userState) {
            if ((this.GetVariableListOperationCompleted == null)) {
                this.GetVariableListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetVariableListOperationCompleted);
            }
            this.InvokeAsync("GetVariableList", new object[] {
                        taskID}, this.GetVariableListOperationCompleted, userState);
        }
        
        private void OnGetVariableListOperationCompleted(object arg) {
            if ((this.GetVariableListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetVariableListCompleted(this, new GetVariableListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AssignProcessFutureTasks", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AssignProcessFutureTasks(string processName, string stepName, string fromUser, string toUser, System.DateTime toDate) {
            object[] results = this.Invoke("AssignProcessFutureTasks", new object[] {
                        processName,
                        stepName,
                        fromUser,
                        toUser,
                        toDate});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AssignProcessFutureTasksAsync(string processName, string stepName, string fromUser, string toUser, System.DateTime toDate) {
            this.AssignProcessFutureTasksAsync(processName, stepName, fromUser, toUser, toDate, null);
        }
        
        /// <remarks/>
        public void AssignProcessFutureTasksAsync(string processName, string stepName, string fromUser, string toUser, System.DateTime toDate, object userState) {
            if ((this.AssignProcessFutureTasksOperationCompleted == null)) {
                this.AssignProcessFutureTasksOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAssignProcessFutureTasksOperationCompleted);
            }
            this.InvokeAsync("AssignProcessFutureTasks", new object[] {
                        processName,
                        stepName,
                        fromUser,
                        toUser,
                        toDate}, this.AssignProcessFutureTasksOperationCompleted, userState);
        }
        
        private void OnAssignProcessFutureTasksOperationCompleted(object arg) {
            if ((this.AssignProcessFutureTasksCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AssignProcessFutureTasksCompleted(this, new AssignProcessFutureTasksCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetInitTaskEntity", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TaskEntity GetInitTaskEntity(string taskID) {
            object[] results = this.Invoke("GetInitTaskEntity", new object[] {
                        taskID});
            return ((TaskEntity)(results[0]));
        }
        
        /// <remarks/>
        public void GetInitTaskEntityAsync(string taskID) {
            this.GetInitTaskEntityAsync(taskID, null);
        }
        
        /// <remarks/>
        public void GetInitTaskEntityAsync(string taskID, object userState) {
            if ((this.GetInitTaskEntityOperationCompleted == null)) {
                this.GetInitTaskEntityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInitTaskEntityOperationCompleted);
            }
            this.InvokeAsync("GetInitTaskEntity", new object[] {
                        taskID}, this.GetInitTaskEntityOperationCompleted, userState);
        }
        
        private void OnGetInitTaskEntityOperationCompleted(object arg) {
            if ((this.GetInitTaskEntityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetInitTaskEntityCompleted(this, new GetInitTaskEntityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteTask", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DeleteTask(TaskEntity task) {
            object[] results = this.Invoke("DeleteTask", new object[] {
                        task});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteTaskAsync(TaskEntity task) {
            this.DeleteTaskAsync(task, null);
        }
        
        /// <remarks/>
        public void DeleteTaskAsync(TaskEntity task, object userState) {
            if ((this.DeleteTaskOperationCompleted == null)) {
                this.DeleteTaskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteTaskOperationCompleted);
            }
            this.InvokeAsync("DeleteTask", new object[] {
                        task}, this.DeleteTaskOperationCompleted, userState);
        }
        
        private void OnDeleteTaskOperationCompleted(object arg) {
            if ((this.DeleteTaskCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteTaskCompleted(this, new DeleteTaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetInitTaskEntityByProcessName", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public TaskEntity GetInitTaskEntityByProcessName(string processName) {
            object[] results = this.Invoke("GetInitTaskEntityByProcessName", new object[] {
                        processName});
            return ((TaskEntity)(results[0]));
        }
        
        /// <remarks/>
        public void GetInitTaskEntityByProcessNameAsync(string processName) {
            this.GetInitTaskEntityByProcessNameAsync(processName, null);
        }
        
        /// <remarks/>
        public void GetInitTaskEntityByProcessNameAsync(string processName, object userState) {
            if ((this.GetInitTaskEntityByProcessNameOperationCompleted == null)) {
                this.GetInitTaskEntityByProcessNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInitTaskEntityByProcessNameOperationCompleted);
            }
            this.InvokeAsync("GetInitTaskEntityByProcessName", new object[] {
                        processName}, this.GetInitTaskEntityByProcessNameOperationCompleted, userState);
        }
        
        private void OnGetInitTaskEntityByProcessNameOperationCompleted(object arg) {
            if ((this.GetInitTaskEntityByProcessNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetInitTaskEntityByProcessNameCompleted(this, new GetInitTaskEntityByProcessNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetServerEntity", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ServerEntity GetServerEntity() {
            object[] results = this.Invoke("GetServerEntity", new object[0]);
            return ((ServerEntity)(results[0]));
        }
        
        /// <remarks/>
        public void GetServerEntityAsync() {
            this.GetServerEntityAsync(null);
        }
        
        /// <remarks/>
        public void GetServerEntityAsync(object userState) {
            if ((this.GetServerEntityOperationCompleted == null)) {
                this.GetServerEntityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServerEntityOperationCompleted);
            }
            this.InvokeAsync("GetServerEntity", new object[0], this.GetServerEntityOperationCompleted, userState);
        }
        
        private void OnGetServerEntityOperationCompleted(object arg) {
            if ((this.GetServerEntityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServerEntityCompleted(this, new GetServerEntityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetServerEntity", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetServerEntity(ServerEntity entity) {
            this.Invoke("SetServerEntity", new object[] {
                        entity});
        }
        
        /// <remarks/>
        public void SetServerEntityAsync(ServerEntity entity) {
            this.SetServerEntityAsync(entity, null);
        }
        
        /// <remarks/>
        public void SetServerEntityAsync(ServerEntity entity, object userState) {
            if ((this.SetServerEntityOperationCompleted == null)) {
                this.SetServerEntityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetServerEntityOperationCompleted);
            }
            this.InvokeAsync("SetServerEntity", new object[] {
                        entity}, this.SetServerEntityOperationCompleted, userState);
        }
        
        private void OnSetServerEntityOperationCompleted(object arg) {
            if ((this.SetServerEntityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetServerEntityCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/LogoutUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void LogoutUser(string sessionId) {
            this.Invoke("LogoutUser", new object[] {
                        sessionId});
        }
        
        /// <remarks/>
        public void LogoutUserAsync(string sessionId) {
            this.LogoutUserAsync(sessionId, null);
        }
        
        /// <remarks/>
        public void LogoutUserAsync(string sessionId, object userState) {
            if ((this.LogoutUserOperationCompleted == null)) {
                this.LogoutUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogoutUserOperationCompleted);
            }
            this.InvokeAsync("LogoutUser", new object[] {
                        sessionId}, this.LogoutUserOperationCompleted, userState);
        }
        
        private void OnLogoutUserOperationCompleted(object arg) {
            if ((this.LogoutUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogoutUserCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class TaskEntity {
        
        private string tASKIDField;
        
        private string pROCESSNAMEField;
        
        private int iNCIDENTField;
        
        private string sUMMARYField;
        
        private string hELPURLField;
        
        private string sTEPLABELField;
        
        private bool sYNCField;
        
        private string sTEPIDField;
        
        private int sTATUSField;
        
        private int pROCESSSTATUSField;
        
        private int sUBSTATUSField;
        
        private System.DateTime sTARTTIMEField;
        
        private System.DateTime eNDTIMEField;
        
        private System.DateTime oVERDUETIMEField;
        
        private string tASKUSERField;
        
        private string aSSIGNEDTOUSERField;
        
        private string iNITIATORField;
        
        private string aPLICANTField;
        
        private string dEPARTMENTField;
        
        private string sERVERNAMEField;
        
        private string sERVERTASKIDField;
        
        private string fORMURLField;
        
        private string eRRORMESSAGEField;
        
        private VarEntity[] varListField;
        
        private string rEASONField;
        
        private string cOMMENTSField;
        
        private string tYPEField;
        
        /// <remarks/>
        public string TASKID {
            get {
                return this.tASKIDField;
            }
            set {
                this.tASKIDField = value;
            }
        }
        
        /// <remarks/>
        public string PROCESSNAME {
            get {
                return this.pROCESSNAMEField;
            }
            set {
                this.pROCESSNAMEField = value;
            }
        }
        
        /// <remarks/>
        public int INCIDENT {
            get {
                return this.iNCIDENTField;
            }
            set {
                this.iNCIDENTField = value;
            }
        }
        
        /// <remarks/>
        public string SUMMARY {
            get {
                return this.sUMMARYField;
            }
            set {
                this.sUMMARYField = value;
            }
        }
        
        /// <remarks/>
        public string HELPURL {
            get {
                return this.hELPURLField;
            }
            set {
                this.hELPURLField = value;
            }
        }
        
        /// <remarks/>
        public string STEPLABEL {
            get {
                return this.sTEPLABELField;
            }
            set {
                this.sTEPLABELField = value;
            }
        }
        
        /// <remarks/>
        public bool SYNC {
            get {
                return this.sYNCField;
            }
            set {
                this.sYNCField = value;
            }
        }
        
        /// <remarks/>
        public string STEPID {
            get {
                return this.sTEPIDField;
            }
            set {
                this.sTEPIDField = value;
            }
        }
        
        /// <remarks/>
        public int STATUS {
            get {
                return this.sTATUSField;
            }
            set {
                this.sTATUSField = value;
            }
        }
        
        /// <remarks/>
        public int PROCESSSTATUS {
            get {
                return this.pROCESSSTATUSField;
            }
            set {
                this.pROCESSSTATUSField = value;
            }
        }
        
        /// <remarks/>
        public int SUBSTATUS {
            get {
                return this.sUBSTATUSField;
            }
            set {
                this.sUBSTATUSField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime STARTTIME {
            get {
                return this.sTARTTIMEField;
            }
            set {
                this.sTARTTIMEField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime ENDTIME {
            get {
                return this.eNDTIMEField;
            }
            set {
                this.eNDTIMEField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime OVERDUETIME {
            get {
                return this.oVERDUETIMEField;
            }
            set {
                this.oVERDUETIMEField = value;
            }
        }
        
        /// <remarks/>
        public string TASKUSER {
            get {
                return this.tASKUSERField;
            }
            set {
                this.tASKUSERField = value;
            }
        }
        
        /// <remarks/>
        public string ASSIGNEDTOUSER {
            get {
                return this.aSSIGNEDTOUSERField;
            }
            set {
                this.aSSIGNEDTOUSERField = value;
            }
        }
        
        /// <remarks/>
        public string INITIATOR {
            get {
                return this.iNITIATORField;
            }
            set {
                this.iNITIATORField = value;
            }
        }
        
        /// <remarks/>
        public string APLICANT {
            get {
                return this.aPLICANTField;
            }
            set {
                this.aPLICANTField = value;
            }
        }
        
        /// <remarks/>
        public string DEPARTMENT {
            get {
                return this.dEPARTMENTField;
            }
            set {
                this.dEPARTMENTField = value;
            }
        }
        
        /// <remarks/>
        public string SERVERNAME {
            get {
                return this.sERVERNAMEField;
            }
            set {
                this.sERVERNAMEField = value;
            }
        }
        
        /// <remarks/>
        public string SERVERTASKID {
            get {
                return this.sERVERTASKIDField;
            }
            set {
                this.sERVERTASKIDField = value;
            }
        }
        
        /// <remarks/>
        public string FORMURL {
            get {
                return this.fORMURLField;
            }
            set {
                this.fORMURLField = value;
            }
        }
        
        /// <remarks/>
        public string ERRORMESSAGE {
            get {
                return this.eRRORMESSAGEField;
            }
            set {
                this.eRRORMESSAGEField = value;
            }
        }
        
        /// <remarks/>
        public VarEntity[] VarList {
            get {
                return this.varListField;
            }
            set {
                this.varListField = value;
            }
        }
        
        /// <remarks/>
        public string REASON {
            get {
                return this.rEASONField;
            }
            set {
                this.rEASONField = value;
            }
        }
        
        /// <remarks/>
        public string COMMENTS {
            get {
                return this.cOMMENTSField;
            }
            set {
                this.cOMMENTSField = value;
            }
        }
        
        /// <remarks/>
        public string TYPE {
            get {
                return this.tYPEField;
            }
            set {
                this.tYPEField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class VarEntity {
        
        private string nameField;
        
        private string valueField;
        
        private bool nillableField;
        
        private string descriptionField;
        
        private string typeField;
        
        private string complexTypeField;
        
        private string parentNameField;
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
        
        /// <remarks/>
        public bool Nillable {
            get {
                return this.nillableField;
            }
            set {
                this.nillableField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public string Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public string ComplexType {
            get {
                return this.complexTypeField;
            }
            set {
                this.complexTypeField = value;
            }
        }
        
        /// <remarks/>
        public string ParentName {
            get {
                return this.parentNameField;
            }
            set {
                this.parentNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class ServerEntity {
        
        private string sERVERNAMEField;
        
        private string dESCRIPTIONField;
        
        private string pRODUCTField;
        
        private string vERSIONField;
        
        private string wEBSERVICEURLField;
        
        private string cLIENTASSEMBLYField;
        
        private string dOMAINNAMEField;
        
        private string dBNAMEField;
        
        /// <remarks/>
        public string SERVERNAME {
            get {
                return this.sERVERNAMEField;
            }
            set {
                this.sERVERNAMEField = value;
            }
        }
        
        /// <remarks/>
        public string DESCRIPTION {
            get {
                return this.dESCRIPTIONField;
            }
            set {
                this.dESCRIPTIONField = value;
            }
        }
        
        /// <remarks/>
        public string PRODUCT {
            get {
                return this.pRODUCTField;
            }
            set {
                this.pRODUCTField = value;
            }
        }
        
        /// <remarks/>
        public string VERSION {
            get {
                return this.vERSIONField;
            }
            set {
                this.vERSIONField = value;
            }
        }
        
        /// <remarks/>
        public string WEBSERVICEURL {
            get {
                return this.wEBSERVICEURLField;
            }
            set {
                this.wEBSERVICEURLField = value;
            }
        }
        
        /// <remarks/>
        public string CLIENTASSEMBLY {
            get {
                return this.cLIENTASSEMBLYField;
            }
            set {
                this.cLIENTASSEMBLYField = value;
            }
        }
        
        /// <remarks/>
        public string DOMAINNAME {
            get {
                return this.dOMAINNAMEField;
            }
            set {
                this.dOMAINNAMEField = value;
            }
        }
        
        /// <remarks/>
        public string DBNAME {
            get {
                return this.dBNAMEField;
            }
            set {
                this.dBNAMEField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class ParameterEntity {
        
        private string nameField;
        
        private string valueField;
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetInitTaskListCompletedEventHandler(object sender, GetInitTaskListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetInitTaskListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetInitTaskListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TaskEntity[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TaskEntity[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetDraftTaskListCompletedEventHandler(object sender, GetDraftTaskListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDraftTaskListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDraftTaskListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TaskEntity[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TaskEntity[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetMyTaskListCompletedEventHandler(object sender, GetMyTaskListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMyTaskListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMyTaskListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TaskEntity[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TaskEntity[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetMyTaskCountCompletedEventHandler(object sender, GetMyTaskCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMyTaskCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMyTaskCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetMyApprovalListCompletedEventHandler(object sender, GetMyApprovalListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMyApprovalListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMyApprovalListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TaskEntity[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TaskEntity[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetMyApprovalCountCompletedEventHandler(object sender, GetMyApprovalCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMyApprovalCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMyApprovalCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetMyRequestListCompletedEventHandler(object sender, GetMyRequestListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMyRequestListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMyRequestListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TaskEntity[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TaskEntity[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetMyRequestCountCompletedEventHandler(object sender, GetMyRequestCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMyRequestCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMyRequestCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetTaskListCompletedEventHandler(object sender, GetTaskListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTaskListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTaskListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TaskEntity[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TaskEntity[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetTaskListCountCompletedEventHandler(object sender, GetTaskListCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTaskListCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTaskListCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetTaskEntityCompletedEventHandler(object sender, GetTaskEntityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTaskEntityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTaskEntityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TaskEntity Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TaskEntity)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetTaskEntityByNameCompletedEventHandler(object sender, GetTaskEntityByNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTaskEntityByNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTaskEntityByNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TaskEntity Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TaskEntity)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetTaskUrlCompletedEventHandler(object sender, GetTaskUrlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTaskUrlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTaskUrlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void SubmitTaskCompletedEventHandler(object sender, SubmitTaskCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SubmitTaskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SubmitTaskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void ReturnTaskCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void RejectTaskCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void AbortIncidentCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetCurrentApproverCompletedEventHandler(object sender, GetCurrentApproverCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCurrentApproverCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCurrentApproverCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetViewTaskIdCompletedEventHandler(object sender, GetViewTaskIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetViewTaskIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetViewTaskIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetGraphicalStatusCompletedEventHandler(object sender, GetGraphicalStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetGraphicalStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetGraphicalStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public byte[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetStepTypeCompletedEventHandler(object sender, GetStepTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStepTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetStepTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void AssignTaskCompletedEventHandler(object sender, AssignTaskCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AssignTaskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AssignTaskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void AssignAllCurrentTasksCompletedEventHandler(object sender, AssignAllCurrentTasksCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AssignAllCurrentTasksCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AssignAllCurrentTasksCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void AssignAllFutureTasksCompletedEventHandler(object sender, AssignAllFutureTasksCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AssignAllFutureTasksCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AssignAllFutureTasksCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetVariableListCompletedEventHandler(object sender, GetVariableListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetVariableListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetVariableListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public VarEntity[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((VarEntity[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void AssignProcessFutureTasksCompletedEventHandler(object sender, AssignProcessFutureTasksCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AssignProcessFutureTasksCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AssignProcessFutureTasksCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetInitTaskEntityCompletedEventHandler(object sender, GetInitTaskEntityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetInitTaskEntityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetInitTaskEntityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TaskEntity Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TaskEntity)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void DeleteTaskCompletedEventHandler(object sender, DeleteTaskCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteTaskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteTaskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetInitTaskEntityByProcessNameCompletedEventHandler(object sender, GetInitTaskEntityByProcessNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetInitTaskEntityByProcessNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetInitTaskEntityByProcessNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public TaskEntity Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((TaskEntity)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void GetServerEntityCompletedEventHandler(object sender, GetServerEntityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServerEntityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServerEntityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ServerEntity Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ServerEntity)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void SetServerEntityCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.18408")]
    public delegate void LogoutUserCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591